# PE Grammar for LE Grammars
# 
# Adapted from [1] and [2] by M. Teichgr√§ber <mt@ib.wmipf.de>.
#
# Best viewed using 140 columns monospaced with tabs every 8.
# 
# [1] PE grammar adapted from [2] by Ian Piumarta <first-name at last-name point com>.
#
# [2] Bryan Ford.  "Parsing Expression Grammars: A Recognition-Based Syntactic
#     Foundation."  Symposium on Principles of Programming Languages,
#     January 14--16, 2004, Venice, Italy.

package main

# parser declaration

type Leg Peg {
 *peg.Tree
}

# Hierarchical syntax

Grammar	<- Spacing
		Declaration?
		(YYstype / YYuserstate / YYnoexport / YYswitchexcl)*
		(Declaration / Definition)+
		Trailer?
		EndOfFile

Declaration	<- Spacing '%{' < (!'%}' . )* > RPERCENT { p.AddHeader(yytext) } commit

YYstype		<- '%YYSTYPE' Spacing GoType	{ p.Define("yystype", yytext) } commit

YYuserstate	<- '%userstate' Spacing GoType { p.Define("userstate", yytext) } commit

YYnoexport	<- '%noexport' Spacing { p.Define("noexport", "1") } commit

YYswitchexcl	<- '%switchexcl' Spacing
			OPEN (Identifier { p.SwitchExclude(yytext) } )+ Spacing CLOSE
			commit

Trailer		<- '%%' < .* >			{ p.AddTrailer(yytext) } commit

Definition	<- Identifier 			{ p.AddRule(yytext) }
		EQUAL Expression		{ p.AddExpression() }
		SEMICOLON?
		 commit

Expression	<- Sequence (BAR Sequence	{ p.AddAlternate() }
			    )* 

Sequence	<- Prefix (Prefix		{ p.AddSequence() }
			  )*
Prefix		<- AND Action			{ p.AddPredicate(yytext) }
		 / AND Suffix			{ p.AddPeekFor() }
		 / NOT Suffix			{ p.AddPeekNot() }
		 /     Suffix
Suffix          <- Primary (QUESTION            { p.AddQuery() }
                           / STAR               { p.AddStar() }
                           / PLUS               { p.AddPlus() }
                           )?
Primary	        <- 'commit' Spacing             { p.AddCommit() }
		 / Identifier			{ p.AddVariable(yytext) }
			COLON Identifier !EQUAL	{ p.AddName(yytext) }
                 / Identifier !EQUAL		{ p.AddName(yytext) }
                 / OPEN Expression CLOSE
                 / Literal                      { p.AddString(yytext) }
                 / Class                        { p.AddClass(yytext) }
                 / DOT                          { p.AddDot() }
                 / Action                       { p.AddAction(yytext) }
                 / BEGIN                        { p.AddBegin() }
                 / END                          { p.AddEnd() }

# Lexical syntax

Identifier	<- < [-a-zA-Z_][-a-zA-Z_0-9]* > Spacing
GoType		<- < '*'? [a-zA-Z_][a-zA-Z_0-9.]* > Spacing
Literal		<- ['] < (!['] Char )* > ['] Spacing
		 / ["] < (!["] Char )* > ["] Spacing
Class		<- '[' < (!']' Range)* > ']' Spacing
Range		<- Char '-' Char / Char
Char		<- '\\' [abefnrtv'"\[\]\\]
		 / '\\' [0-3][0-7][0-7]
		 / '\\' [0-7][0-7]?
		 / !'\\' .

Action		<- '{' < Braces* > '}' Spacing
Braces		<- '{' (!'}' .)* '}'
		/ !'}' .

EQUAL		<- '=' Spacing
COLON		<- ':' Spacing
SEMICOLON	<- ';' Spacing
BAR		<- '|' Spacing
AND		<- '&' Spacing
NOT		<- '!' Spacing
QUESTION	<- '?' Spacing
STAR		<- '*' Spacing
PLUS		<- '+' Spacing
OPEN		<- '(' Spacing
CLOSE		<- ')' Spacing
DOT		<- '.' Spacing
BEGIN		<- '<' Spacing
END		<- '>' Spacing
RPERCENT	<- '%}' Spacing

Spacing		<- (Space / Comment)*
Space		<- ' ' / '\t' / EndOfLine
Comment		<- '#' (!EndOfLine .)* EndOfLine
EndOfLine	<- '\r\n' / '\n' / '\r'
EndOfFile	<- !.

